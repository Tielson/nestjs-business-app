generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id
  company              String
  email                String                @unique
  number               String
  cnpj                 String                @unique
  payments             Payment[]
  sales_representative SalesRepresentative[]
  Customer             Customer[]
  PurchaseHistory      PurchaseHistory[]
  ExpectedExpenses     ExpectedExpenses[]
  Expenses             Expenses[]
  OtherIncome          OtherIncome[]
}

model Payment {
  id                Int      @id @default(autoincrement())
  amount            Int
  date              DateTime @default(now())
  user_id           String
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stripe_payment_id String   @unique
}

model SalesRepresentative {
  id            Int    @id @default(autoincrement())
  full_name     String
  date_of_birth String
  user_id       String @unique
  user          User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sales_representative")
}

model Customer {
  id               Int               @id @default(autoincrement())
  full_name        String
  surname          String
  person_type      String
  phone            String
  date_of_birth    String?
  cpf              String?
  rg               String?
  rg_state         String?
  cnpj             String?
  email            String
  trade_name       String?
  company_name     String?
  number           String
  is_active        Boolean
  is_client        Boolean
  is_supplier      Boolean
  is_recurring     Boolean
  cep              String?
  street           String?
  neighborhood     String?
  city             String?
  state            String?
  complement       String?
  user_id          String            @unique
  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  purchase_history PurchaseHistory[]
}

model PurchaseHistory {
  id               Int      @id @default(autoincrement())
  payment_method   String
  purchase_date    String
  item_description String
  sales_channel    String
  value            Int
  customer_id      Int
  user_id          String   @unique
  customer         Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("purchase_history")
}

model ExpectedExpenses {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  value       Int
  method      String
  recurrence  String
  date        String
  user_id     String  @unique
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("expected_expenses")
}

model Expenses {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  value       Int
  method      String
  date        String
  user_id     String  @unique
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model OtherIncome {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  value       Int
  method      String
  date        String
  user_id     String  @unique
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("other_income")
}
